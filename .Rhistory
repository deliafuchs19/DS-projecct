}
return(data)
}
# Rename years from Xyear to year and tranform them into integers
renameyear <- function(data) {
for (i in 2000:2022) {
varname <- paste("X", i, sep = "")
names(data)[names(data) == varname] <- gsub("X", "", varname)
}
return(data)
}
# Transform the database from wide to long
wide2long <- function(data) {
data_name <- deparse(substitute(data))
data <- pivot_longer(data,
cols = -c("Country.Name", "Country.Code"),
names_to = "year",
values_to = "data")
colnames(data)[colnames(data) == "data"] <- data_name
return(data)
}
# Transform the year variable into an integer variable
yearint <- function(data) {
data$year <- as.integer(data$year)
return(data)
}
# rearrange and rename the columns to match the ones of the other datasets
nameorder <- function(data) {
colnames(data) <- c("country", "code", "year", "data")
data <- data %>% select(c("code", "country", "year", "data"))
}
# one function that contains all the others
cleanwide2long <- function(data){
data <- remove(data)
data <- makenum(data)
data <- renameyear(data)
data <- wide2long(data)
data <- yearint(data)
data <- nameorder(data)
}
# Apply function to three database
GDPpercapita <- cleanwide2long(GDPpercapita)
MilitaryExpenditurePercentGDP <- cleanwide2long(MilitaryExpenditurePercentGDP)
MiliratyExpenditurePercentGovExp <- cleanwide2long(MiliratyExpenditurePercentGovExp)
GDPpercapita <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/GDPpercapita.csv', header=TRUE, sep=";")
MilitaryExpenditurePercentGDP <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/MilitaryExpenditurePercentGDP.csv', header=TRUE, sep=";")
MiliratyExpenditurePercentGovExp <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/MiliratyExpenditurePercentGovExp.csv', header=TRUE, sep=";")
# libraries
library('dplyr')
library('tidyr')
# remove the variables that we don't need
remove <- function(data){
years <- seq(1960, 1999)
removeyears <- paste("X", years, sep = "")
data <- data[, !(names(data) %in% c("Indicator.Name", "Indicator.Code", "X", removeyears))]
}
# Rename the variables to delete the X before the years and make sure they contain all numeric values
makenum <- function(data) {
for (i in 2000:2022) {
year <- paste("X", i, sep = "")
data[[year]] <- as.numeric(data[[year]])
}
return(data)
}
# Rename years from Xyear to year and tranform them into integers
renameyear <- function(data) {
for (i in 2000:2022) {
varname <- paste("X", i, sep = "")
names(data)[names(data) == varname] <- gsub("X", "", varname)
}
return(data)
}
# Transform the database from wide to long
wide2long <- function(data) {
data <- pivot_longer(data,
cols = -c("Country.Name", "Country.Code"),
names_to = "year",
values_to = "data")
return(data)
}
# Transform the year variable into an integer variable
yearint <- function(data) {
data$year <- as.integer(data$year)
return(data)
}
# rearrange and rename the columns to match the ones of the other datasets
nameorder <- function(data) {
colnames(data) <- c("country", "code", "year", "data")
data <- data %>% select(c("code", "country", "year", "data"))
}
# one function that contains all the others
cleanwide2long <- function(data){
data <- remove(data)
data <- makenum(data)
data <- renameyear(data)
data <- wide2long(data)
data <- yearint(data)
data <- nameorder(data)
}
# Apply function to three database
GDPpercapita <- cleanwide2long(GDPpercapita)
MilitaryExpenditurePercentGDP <- cleanwide2long(MilitaryExpenditurePercentGDP)
MiliratyExpenditurePercentGovExp <- cleanwide2long(MiliratyExpenditurePercentGovExp)
colname(GDPpercapita$data) <- "GDPpercapita"
colnames(GDPpercapita$data) <- "GDPpercapita"
colnames(GDPpercapita)[data] <- "GDPpercapita"
GDPpercapita <- GDPpercapita %>%
rename(GDPpercapita = data)
MilitaryExpenditurePercentGDP <- MilitaryExpenditurePercentGDP %>%
rename(MilitaryExpenditurePercentGDP = data)
MiliratyExpenditurePercentGovExp <- MiliratyExpenditurePercentGovExp %>%
rename(MiliratyExpenditurePercentGovExp = data)
View(MiliratyExpenditurePercentGovExp)
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
library(lubridate)
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID$date <- as.integer(year(COVID$date))
COVID <- COVID %>%
group_by(year) %>%
summarize(cases_per_million = sum(new_cases_per_million))
library(dplyr)
COVID <- COVID %>%
group_by(year) %>%
summarize(cases_per_million = sum(new_cases_per_million))
COVID <- COVID %>%
group_by(date) %>%
summarize(cases_per_million = sum(new_cases_per_million))
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
library(lubridate)
library(dplyr)
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID$date <- as.integer(year(COVID$date))
COVID_aggregated <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations)
)
COVID$stringency_index
COVID_aggregated <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations)
stringency=avg(stringency_index)
COVID_aggregated <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations),
stringency=avg(stringency_index)
)
COVID_aggregated <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations),
stringency = mean(stringency_index)
)
COVID <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations),
stringency = mean(stringency_index)
)
COVID <- COVID %>%
group_by(year) %>%
distinct(year)
COVID <- COVID %>%
group_by(date) %>%
distinct(date)
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
library(lubridate)
library(dplyr)
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID$date <- as.integer(year(COVID$date))
COVID <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million),
deaths_per_million = sum(new_deaths_per_million),
vaccinations = sum(new_vaccinations),
stringency = mean(stringency_index)
)
COVID_e <- COVID %>%
distinct(date)
COVID$cases_per_million
COVID$vaccinations
COVID$stringency
COVID$vaccinations
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
library(lubridate)
library(dplyr)
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID$date <- as.integer(year(COVID$date))
COVID1 <- COVID %>%
group_by(date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
vaccinations = sum(new_vaccinations, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID2 <- COVID %>%
distinct(date)
COVID2 <- COVID %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
COVID2 <- COVID1 %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
COVID3 <- COVID2[,-c(new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID3 <- COVID2[,-c("new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID3 <- COVID2[,-("new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID3 <- COVID2[ ,-c("new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID3 <- subset(COVID2, select = -c(new_cases_per_million, new_deaths_per_million, new_vaccinations, stringency_index))
table(COVID3$cases_per_million)
COVID3$cases_per_million
COVID3$deaths_per_million
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
library(lubridate)
library(dplyr)
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "new_vaccinations", "stringency_index")]
COVID$date <- as.integer(year(COVID$date))
COVID1 <- COVID %>%
group_by(location, date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
vaccinations = sum(new_vaccinations, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID2 <- COVID1 %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
COVID3 <- subset(COVID2, select = -c(new_cases_per_million, new_deaths_per_million, new_vaccinations, stringency_index))
View(COVID3)
COVID3$cases_per_million
table(COVID3$cases_per_million)
summary(COVID3$cases_per_million)
summary(COVID3$deaths_per_million)
colnames(COVID3) <- c("code", "country", "year", "continent", "cases_per_million", "deaths_per_million", "vaccinations", "stringency")
summary(COVID3$cases_per_million)
summary(COVID3$deaths_per_million)
summary(COVID3$vaccinations)
summary(COVID3$stringency)
COVID3$cases_per_million
COVID3$deaths_per_million
COVID3$vaccinations
COVID3$stringency
head(COVID3)
mean(is.na(COVID$stringency_index))
mean(is.na(COVID$new_cases_per_million))
mean(is.na(COVID$new_deaths_per_million))
mean(is.na(COVID$new_vaccinations))
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
mean(is.na(COVID$total_vaccinations_per_hundred))
mean(is.na(COVID$people_vaccinated_per_hundred))
mean(is.na(COVID$new_vaccinations_smoothed_per_million))
mean(is.na(COVID$new_people_vaccinated_smoothed))
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
# Import data
# COVID <- read.csv(here::here('COVID.csv'))
# libraries
library(lubridate)
library(dplyr)
# Only keep the variables that we are interested in
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "stringency_index")]
# Transform the dates ("YYYY-MM-DD") into years ("YYYY") and integers
COVID$date <- as.integer(year(COVID$date))
# Aggregate the observation of all days of a year in one observation per country
COVID1 <- COVID %>%
group_by(location, date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID2 <- COVID1 %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
# Remove the variable that have the information for every day and only keep those by year
COVID3 <- subset(COVID2, select = -c(new_cases_per_million, new_deaths_per_million, stringency_index))
summary(COVID3$cases_per_million)
summary(COVID3$deaths_per_million)
summary(COVID3$stringency)
COVID3$cases_per_million
COVID3$deaths_per_million
COVID3$stringency
head(COVID3)
# Rename the variables
colnames(COVID3) <- c("code", "country", "year", "continent", "cases_per_million", "deaths_per_million", "vaccinations", "stringency")
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
# Import data
# COVID <- read.csv(here::here('COVID.csv'))
# libraries
library(lubridate)
library(dplyr)
# Only keep the variables that we are interested in
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "stringency_index")]
# Transform the dates ("YYYY-MM-DD") into years ("YYYY") and integers
COVID$date <- as.integer(year(COVID$date))
# Aggregate the observation of all days of a year in one observation per country
COVID1 <- COVID %>%
group_by(location, date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID2 <- COVID1 %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
# Remove the variable that have the information for every day and only keep those by year
COVID3 <- subset(COVID2, select = -c(new_cases_per_million, new_deaths_per_million, stringency_index))
summary(COVID3$cases_per_million)
summary(COVID3$deaths_per_million)
summary(COVID3$stringency)
COVID3$cases_per_million
COVID3$deaths_per_million
COVID3$stringency
head(COVID3)
# Rename the variables
colnames(COVID3) <- c("code", "country", "year", "continent", "cases_per_million", "deaths_per_million", "stringency")
table(COVID3$country, COVID$stringency)
COVID4 <- COVID3 %>%
group_by(location) %>%
mutate(
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID4 <- COVID3 %>%
group_by(country) %>%
mutate(
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID4 <- COVID3 %>%
group_by(country) %>%
mutate(
stringency = mean(stringency, na.rm = TRUE)
)%>%
ungroup()
mean(is.na(COVID3$stringency))
mean(is.na(COVID4$stringency))
summary(COVID4$stringency)
COVID4 <- COVID4[COVID4$year <= 2022, ]
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
# Import data
# COVID <- read.csv(here::here('COVID.csv'))
# libraries
library(lubridate)
library(dplyr)
# Only keep the variables that we are interested in
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "stringency_index")]
# Transform the dates ("YYYY-MM-DD") into years ("YYYY") and integers
COVID$date <- as.integer(year(COVID$date))
# Aggregate the observation of all days of a year in one observation per country
COVID <- COVID %>%
group_by(location, date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID <- COVID %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
# Remove the variable that have the information for every day and only keep those by year
COVID <- subset(COVID, select = -c(new_cases_per_million, new_deaths_per_million, stringency_index))
# Rename the variables
colnames(COVID) <- c("code", "country", "year", "continent", "cases_per_million", "deaths_per_million", "stringency")
# Take the average stringency over the years for a country because of missing values
mean(is.na(COVID$stringency))
COVID <- COVID %>%
group_by(country) %>%
mutate(
stringency = mean(stringency, na.rm = TRUE)
)%>%
ungroup()
mean(is.na(COVID$stringency))
# Remove the years after 2022 to match our main database
COVID <- COVID[COVID$year <= 2022, ]
COVID$code
COVID$code <- gsub("OWID_", "", varname)
COVID$code <- lapply(COVID$code, function(x) gsub("OWID_", "", x))
COVID <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/COVID.csv')
# Import data
# COVID <- read.csv(here::here('COVID.csv'))
# libraries
library(lubridate)
library(dplyr)
# Only keep the variables that we are interested in
COVID <- COVID[,c("iso_code", "location", "date", "continent", "new_cases_per_million", "new_deaths_per_million", "stringency_index")]
# Transform the dates ("YYYY-MM-DD") into years ("YYYY") and integers
COVID$date <- as.integer(year(COVID$date))
# Aggregate the observation of all days of a year in one observation per country
COVID <- COVID %>%
group_by(location, date) %>%
mutate(
cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
stringency = mean(stringency_index, na.rm = TRUE)
)%>%
ungroup()
COVID <- COVID %>%
group_by(location, date) %>%
distinct(date, .keep_all = TRUE) %>%
ungroup()
# Remove the variable that have the information for every day and only keep those by year
COVID <- subset(COVID, select = -c(new_cases_per_million, new_deaths_per_million, stringency_index))
# Rename the variables
colnames(COVID) <- c("code", "country", "year", "continent", "cases_per_million", "deaths_per_million", "stringency")
# Take the average stringency over the years for a country because of missing values
mean(is.na(COVID$stringency))
COVID <- COVID %>%
group_by(country) %>%
mutate(
stringency = mean(stringency, na.rm = TRUE)
)%>%
ungroup()
mean(is.na(COVID$stringency))
# Remove the years after 2022 to match our main database
COVID <- COVID[COVID$year <= 2022, ]
# Make sure the country codes are all iso codes with 3 letters
COVID$code <- gsub("OWID_", "", COVID$code)
COVID$code
COVID$continent <- as.fator(COVID$continent)
COVID$continent <- as.factor(COVID$continent)
GDPpercapita <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/GDPpercapita.csv', header=TRUE, sep=";")
MilitaryExpenditurePercentGDP <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/MilitaryExpenditurePercentGDP.csv', header=TRUE, sep=";")
MiliratyExpenditurePercentGovExp <- read.csv('C:/Users/Delia/Documents/1. Formations études école/HEC/MSc1/Data Science in Business Analytics/DS-projecct/MiliratyExpenditurePercentGovExp.csv', header=TRUE, sep=";")
# libraries
library('dplyr')
library('tidyr')
# remove the variables that we don't need
remove <- function(data){
years <- seq(1960, 1999)
removeyears <- paste("X", years, sep = "")
data <- data[, !(names(data) %in% c("Indicator.Name", "Indicator.Code", "X", removeyears))]
}
# Rename the variables to delete the X before the years and make sure they contain all numeric values
makenum <- function(data) {
for (i in 2000:2022) {
year <- paste("X", i, sep = "")
data[[year]] <- as.numeric(data[[year]])
}
return(data)
}
# Rename years from Xyear to year and tranform them into integers
renameyear <- function(data) {
for (i in 2000:2022) {
varname <- paste("X", i, sep = "")
names(data)[names(data) == varname] <- gsub("X", "", varname)
}
return(data)
}
# Transform the database from wide to long
wide2long <- function(data) {
data <- pivot_longer(data,
cols = -c("Country.Name", "Country.Code"),
names_to = "year",
values_to = "data")
return(data)
}
# Transform the year variable into an integer variable
yearint <- function(data) {
data$year <- as.integer(data$year)
return(data)
}
# rearrange and rename the columns to match the ones of the other datasets
nameorder <- function(data) {
colnames(data) <- c("country", "code", "year", "data")
data <- data %>% select(c("code", "country", "year", "data"))
}
# one function that contains all the others
cleanwide2long <- function(data){
data <- remove(data)
data <- makenum(data)
data <- renameyear(data)
data <- wide2long(data)
data <- yearint(data)
data <- nameorder(data)
}
# Apply function to three database
GDPpercapita <- cleanwide2long(GDPpercapita)
MilitaryExpenditurePercentGDP <- cleanwide2long(MilitaryExpenditurePercentGDP)
MiliratyExpenditurePercentGovExp <- cleanwide2long(MiliratyExpenditurePercentGovExp)
# Rename the data columns to have the right name
GDPpercapita <- GDPpercapita %>%
rename(GDPpercapita = data)
MilitaryExpenditurePercentGDP <- MilitaryExpenditurePercentGDP %>%
rename(MilitaryExpenditurePercentGDP = data)
MiliratyExpenditurePercentGovExp <- MiliratyExpenditurePercentGovExp %>%
rename(MiliratyExpenditurePercentGovExp = data)
